name: Deploy to AWS ECS

on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=Production" >> $GITHUB_ENV
            echo "ECS_CLUSTER=therapy-cluster-prod" >> $GITHUB_ENV
            echo "ECS_SERVICE=therapy-api-service-prod" >> $GITHUB_ENV
            echo "ECS_TASK=therapy-api-task-prod" >> $GITHUB_ENV
            echo "ECR_REPO=therapy-api-prod" >> $GITHUB_ENV
            echo "HOSTED_RECORD_NAME=service.gyme.io" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=Development" >> $GITHUB_ENV
            echo "ECS_CLUSTER=therapy-cluster-dev" >> $GITHUB_ENV
            echo "ECS_SERVICE=therapy-api-service-dev" >> $GITHUB_ENV
            echo "ECS_TASK=therapy-api-task-dev" >> $GITHUB_ENV
            echo "ECR_REPO=therapy-api-dev" >> $GITHUB_ENV
            echo "HOSTED_RECORD_NAME=dev.service.gyme.io" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate with AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          docker build -t $IMAGE_URI:latest --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} .
          docker tag $IMAGE_URI:latest $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment

      - name: Wait for ECS Task to Start
        run: |
          TIMEOUT=300  # Max wait time in seconds (5 minutes)
          INTERVAL=5   # Time between status checks
          ELAPSED=0    # Time counter

          echo "Waiting for ECS task to reach RUNNING state..."

          until [ "$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query "taskArns[0]" --output text) \
            --query "tasks[0].lastStatus" --output text)" == "RUNNING" ]; do
            
            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "ERROR: Timeout waiting for ECS task to start."
              exit 1
            fi

            echo "Still waiting... ($ELAPSED/$TIMEOUT seconds)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "ECS task is now RUNNING."

      - name: Get Fargate Task Public IP
        id: get-ip
        run: |
          PUBLIC_IP=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query "taskArns[0]" --output text) \
            --query "tasks[0].acontainers[0].networkInterfaces[0].privateIpv4Address" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Update Route 53 DNS Record
        run: |
          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{secrets.AWS_HOSTED_ZONE_ID}} \
            --change-batch '
            {
              "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${{ env.HOSTED_RECORD_NAME }}",
                  "Type": "A",
                  "TTL": 300,
                  "ResourceRecords": [{"Value": "'"$PUBLIC_IP"'"}]
                }
              }]
            }'